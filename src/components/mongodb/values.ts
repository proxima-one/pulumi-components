/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Allowed values: `standalone` or `replicaset`
 */
export type MongoDBRegArchitecture = string;
export type EnableAuthentication = boolean;
/**
 * Name of the admin user. Default is root
 */
export type MongoDBRegAdminUser = string;
/**
 * Defaults to a random 10-character alphanumeric string if not set
 */
export type MongoDBRegAdminPassword = string;
/**
 * Name of the custom database to be created during the 1st initialization of MongoDB&reg;
 */
export type MongoDBRegCustomDatabase = string;
/**
 * Name of the custom user to be created during the 1st initialization of MongoDB&reg;. This user only has permissions on the MongoDB&reg; custom database
 */
export type MongoDBRegCustomUser = string;
/**
 * Defaults to a random 10-character alphanumeric string if not set
 */
export type PasswordForMongoDBRegCustomUser = string;
/**
 * Defaults to a random 10-character alphanumeric string if not set
 */
export type KeyUsedForReplicaSetAuthentication = string;
export type NumberOfMongoDBRegReplicas = number;
export type MongoDBRegCustomConfiguration = string;
export type ArbiterCustomConfiguration = string;
/**
 * Enable persistence using Persistent Volume Claims
 */
export type EnablePersistence = boolean;
export type PersistentVolumeSize = string;
/**
 * Use an init container to set required folder permissions on the data volume before mounting it in the final destination
 */
export type EnableInitContainers = boolean;
/**
 * Create a side-car container to expose Prometheus metrics
 */
export type CreatePrometheusMetricsExporter = boolean;
/**
 * Create a ServiceMonitor to track metrics using Prometheus Operator
 */
export type CreatePrometheusOperatorServiceMonitor = boolean;

export interface ValuesSchema {
  architecture?: MongoDBRegArchitecture;
  auth?: AuthenticationConfiguration;
  replicaCount?: NumberOfMongoDBRegReplicas;
  configuration?: MongoDBRegCustomConfiguration;
  arbiter?: ArbiterConfiguration;
  persistence?: PersistenceConfiguration;
  volumePermissions?: {
    enabled?: EnableInitContainers;
    [k: string]: unknown;
  };
  metrics?: PrometheusMetricsDetails;
  [k: string]: unknown;
}
export interface AuthenticationConfiguration {
  enabled?: EnableAuthentication;
  rootUser?: MongoDBRegAdminUser;
  rootPassword?: MongoDBRegAdminPassword;
  database?: MongoDBRegCustomDatabase;
  username?: MongoDBRegCustomUser;
  password?: PasswordForMongoDBRegCustomUser;
  replicaSetKey?: KeyUsedForReplicaSetAuthentication;
  [k: string]: unknown;
}
export interface ArbiterConfiguration {
  configuration?: ArbiterCustomConfiguration;
  [k: string]: unknown;
}
export interface PersistenceConfiguration {
  enabled?: EnablePersistence;
  size?: PersistentVolumeSize;
  [k: string]: unknown;
}
export interface PrometheusMetricsDetails {
  enabled?: CreatePrometheusMetricsExporter;
  serviceMonitor?: {
    enabled?: CreatePrometheusOperatorServiceMonitor;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
